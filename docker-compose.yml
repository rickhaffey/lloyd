services:
  postgres:
    image: postgres:17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=top

  prestart:
    image: liquibase/liquibase:4.32
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    volumes:
      - ./liquibase/migrations:/liquibase/migrations
      - ./liquibase/changelog.xml:/liquibase/changelog.xml
      - ./liquibase/liquibase.properties:/liquibase/liquibase.properties
    command:
      - --defaults-file=/liquibase/liquibase.properties
      - update

  adminer:
    image: adminer
    restart: always
    depends_on:
      - postgres

  api:
    image: '${DOCKER_IMAGE_API?Variable not set}:${TAG-latest}'
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_SERVICE_NAME=lloyd.api
      - OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true


  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.128.0
    volumes:
      - ./observability/otel-collector-config.yml:/etc/otelcol-contrib/config.yaml
    depends_on:
      postgres:
        condition: service_healthy
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully

  prometheus:
    image: prom/prometheus:v3.3.1
    healthcheck:
      test: wget --quiet --tries=1 --output-document=- http://localhost:9090/-/healthy | grep -q -w Healthy || exit 1
      start_period: 20s
      interval: 10s
      timeout: 1s
      retries: 12  # try for 2 minutes
    volumes:
      - ./observability/prometheus.yml:/workspace/prometheus.yml
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      otel-collector:
        condition: service_started


  tempo:
    image: grafana/tempo:2.7.2
    healthcheck:
      test: wget --quiet --tries=1 --output-document=- http://localhost:3200/ready | grep -q -w ready || exit 1
      start_period: 20s
      interval: 10s
      timeout: 1s
      retries: 12  # try for 2 minutes
    volumes:
      - ./observability/tempo.yml:/etc/tempo.yml
    command: [ "-config.file=/etc/tempo.yml", "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]

  loki:
    image: grafana/loki:3.5.0
    healthcheck:
      test: wget --quiet --tries=1 --output-document=- http://localhost:3100/ready | grep -q -w ready || exit 1
      start_period: 20s
      interval: 10s
      timeout: 1s
      retries: 12  # try for 2 minutes
    volumes:
      - ./observability/loki-config.yml:/etc/loki/local-config.yml
    command: -config.file=/etc/loki/local-config.yml

  grafana:
    image: grafana/grafana:12.0.2
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    ports:
      - 3000:3000/tcp
    volumes:
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./observability/grafana/plugins:/etc/grafana/provisioning/plugins
      - ./observability/grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./observability/grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      prometheus:
        condition: service_healthy
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy

  mkdocs:
    image: '${DOCKER_IMAGE_MKDOCS?Variable not set}:${TAG-latest}'
    ports:
      - "8081:8000"
    volumes:
      - ./mkdocs:/docs

  locust:
    image: locustio/locust:2.37.10
    ports:
      - "8089:8089"
    volumes:
      - ./observability/locustfile.py:/mnt/locust/locustfile.py
    depends_on:
      api:
        condition: service_started
    command: -f /mnt/locust/locustfile.py --users 10 --spawn-rate 1 -H http://api:8000

volumes:
  postgres-data:
